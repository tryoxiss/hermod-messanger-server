                                DIM/1.0                        July 2023

                             19 July 2023
                Distributed Instant Messaging Protcol
                               DIM/1.0

Status of this Memo

    This document specifies an unoffical RFC, the Distributed
    Instant Messaging Protocol, for Internet community. Distribution
    of this RFC is unlimited.

Abstract

    The distributed instant messaging protcol (DIM) is an
    applicaton-level protcol for distributed, collaborative,
    messaging systems.

Table of Contents

    1  Introduction
        1.1  Pourpose
        1.2  Requirements
        1.3  Termolonolgy
    2  Packet Definition
        2.1  Version
        2.2  Request Segment
	     2.2.1  Request
	     2.2.2  Location
	2.3  Response Segment
	     2.3.1  Response Code
	     2.3.2  Response Message
	2.4  Header Line
             2.4.1  Variable Format
             2.4.2  Required Variables
             2.4.3  Other Variables
	2.5  Content Format
    3  Connection
    4  Channel Types
        4.1  Text Channels
        4.2  Voice Channels
        4.3  Article Channels

1     Introduction

1.1   Pourpose

    Distributed Instant Messaging protcol, refered to as "DIM" here in,
    is a protocol for distributed instant messaging systems. It's 
    goal is to be a unanimous protocol for messaging systems, simillar
    to email.

1.2   Requirements

    The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY"
    this document are to be interprited as described in rfc-2119.

1.3   Termonology

    This speficiation uses many terms to refer to the parts, roles,
    and items refered to. Contained in this section are the defintions
    for said terms. Many of these are simillar, or identical to, those
    specified in rfc-2616

    connection
        A transport later virtual circuit established between two
        programs for the pourposes of communication

    packet  -OR-  message
        A structured sequence of bytes (octets) matching the definition
        in section 2.

    request
        A DIM request message, as defined in section 2 excluding
        subsection 2.3.

    response
        A DIM response message, as defined in section 2 excluding
        subsection 2.2.

    resouerce
        A file or subset of data, such as a PNG file, or a users
        table which may be contained in a larger file, such as
        a database.

    variant
        A resource may have multiple correct formats, each of these
        is considered its own variant.

    client
        The program which initatesand handles a requests or acts on
        behalf of a user. 

    user agent
        A user-side client. These often also have user interfaces, 
        but do not require them to be considered a client for the 
        pourposes of this specification.

    server
        A server-side user agent. These often have a more advanced data
        storage method, such as a database, but do not require one to
        be considered a server for the pourposes of this specification.

    origin server
        The server on which a given resource, such as an image, user
        account, or group resides.

    home server
        The server that a server-bound resource resides with, such
        as a user or group.

    proxy
        An intermedite program which acts as both a server and a client
        for the pourpose of making requests on behalf of other clients.

    gateway
        A server which acts as an intermediary for other servers.
        Unlike a proxy, a gateway recieves requests as if it were the

    tunnel
        An intermediary program acting as a blind relay between
        two connections. Once established, a tunnel is not considred
        party to any connection.

    cache
        A programs local store of requests, responses, and other
        applicable resources.

    first-hand
        A request or response that comes directly from the client,
        without any proxies, gateways, or tunnels in between.

    nth-hand
        A request or response that has been through at least one
        tunnel, proxy, or gateway.

    age
        The age is the time since it was sent or validated by the
        origin server

    freshness lifetime  -OR-  lifetime
        The length of time in which a packet is considered usable.

    fresh
        A packet that has not yet exeeded its freshness lifetime.
        A packet MUST NOT be fresh for more than 1 hour.

    stale
        A packet that has exeeded its freshness lifetime.

    upstream/downstream
        The flow of a message. All messages flow from upstream to
        downstream

    inbound/outbound
        Inbound refers to any incoming packets.
        Outbound refers to any outgoing packets.

        A message can be both, for example a proxy gets an inbound
        packet, which then becomes an outbound packet as they send it
        out. A message can not be both at once.

2     Packet Definition

    A DIM packet is has its version, followed by a space, followed
    by either a request segment OR a response segment. It is then
    followed by a 0A byte, a list of header variables, and another
    0A byte.

    Begining directly after the second 0A byte through to the end of
    the message is the content. This may be in any format, but this
    specification defines severil formats that may be commonly
    desired.

        <Version> SP <Request OR Response Segment>
        <Header Line>
        <Content>

    These are each defined in thier own sections.

2.1   Version

    The version component is defined as the following block. These MUST
    all be ASCII lowercase

        dim/<Major>.<Minor>[.<Patch>]
        
        Major  =  A real number between 0 and 255
        Minor  =  A real number between 0 and 255
        Patch  =  A real number between 0 and 265
    
    The pourpose of the version component is to ensure that the packet
    is being parsed correctly. Future versions are to be avoided,
    but are supported in case of major need for revisions such as
    security pourposes.

2.2   Request Segment

    The request segment is defined as the following block.

        <REQUEST> SP <location>

    See the following sections for elaboration

2.2.1 Request

    The request field MUST be ALL CAPITALISED. All methods are as
    follows.

        o   GET      =  Requests a resource at the specified location
        o   EDIT     =  Applies partial changes to a resource at the
                        specified location.
        o   POST     =  Submits a message to the server or another
                        user agent, often causing it to be created.
        o   REMOVE   =  Request that a resource at the specified
                        location be removed.
    
    For POST, a the location is where you want to post it to rather
    than where it can be located.

    For a simple ping request you SHOULD send a GET request with
    ping:ping. The server SHOULD respond with the following format
    in the content field, and it SHOULD have the content format of
    either "csv" or "plaintext"

        time_recieved,processing_time_in_millaseconds

2.2.2 Location

    A DIM location is made up of two primary parts, the
    type-specific-part, which varries depending on its
    starting character, followed by a commercial at-sign,
    followed by a path string.

    Any identifier may be a string literal, requiring no
    annotation, or a base64 GUID as specified in RFC-4648
    with the "/" character swapped for an "_" character
    for path compatability. indicated by the segment
    starting with a dollar sign ("$") character.

        ["dim:"]<Type-Specific-Part><"@">[Path]

    If the Type-Specific-Part begins with a "#", it is a
    location, such as a channel or file. If it begins with A
    commercial at-sign, it identifies a user account.

        Path-Segment = <$GUID or string_name>

    Type specific part (case: User ID ("@"))

            (user account)       (profile)
        "@" <Path-Segment> ["/"] <Path-Segment>
    
    Type specific part (case: Location ("#"))

        "#" <Path-Segment>
    
    You likely noticed that the account may have many profiles,
    since they are detached. This is by design.

    The path is any number of path segments seperated by a
    forward slash ("/") character to denote the resource
    you want. We reccommend you make this 1:1 with the file
    system representation, with containers being directories
    and resources being files.

    An item can be both a container and a resource by including
    a directory with a resource of the same name (any extension)
    inside it.

    The following test cases use these GUIDs:

        forest_system       = uvkc9gBskEK5rwux1dz5jA
        forest_system/birch = YqWslsYRXUOygHeN0J2HBQ
        forest_system/oak   = XmI2WrS_SU+tqYpwDg71ow
        forest_system/pine  = PyMiaIwMWUSpN_V7kccYKg

        clearing              = G+htotm90UuRlkp9hFIeuA
        clearing/info/rules   = +OsehBxrHkGxembtmPXgKA
        clearing/main/general = K1Y+k+DtnE6dWKa9l_BjSw
        clearing/main/media   = kOUCla6pgUSSOJJXegVfDA

    Test cases (valid)

        dim:@forest_system/birch@example.com
        dim:@forest_system/birch@example.com/about
        dim:@forest_system/birch@example.com/lists/block
        dim:@forest_system/birch@example.com/lists/friends

        dim:@$uvkc9gBskEK5rwux1dz5jA/birch@example.com
        dim:@forest_system/$YqWslsYRXUOygHeN0J2HBQ@example.com/about
        dim:@$uvkc9gBskEK5rwux1dz5jA/$YqWslsYRXUOygHeN0J2HBQ@example.com/lists/block
        dim:@forest_system/birch@example.com/lists/friends

        @forest_system/birch@example.com
        @forest_system/birch@example.com/about
        @$uvkc9gBskEK5rwux1dz5jA/birch@example.com
        @forest_system/$YqWslsYRXUOygHeN0J2HBQ@example.com/about
        @$uvkc9gBskEK5rwux1dz5jA/$YqWslsYRXUOygHeN0J2HBQ@example.com/lists/block

        dim:#clearing@domain.tld/rules
        dim:#clearing@domain.tld/info/rules
        dim:#clearing@domain.tld/main/general
        dim:#clearing@domain.tld/rules

        It is worth noting that while groups *may* have namespaces,
        it is uncommon for instances to let them use one instead of
        a GUID. Channels are reccommended to always allow namespaces.

        dim:#$G+htotm90UuRlkp9hFIeuA@domain.tld/$+OsehBxrHkGxembtmPXgKA/
        dim:#clearing@domain.tld/index
    
    Test Cases (invalid)

        <>

    Every group SHOULD have an "index" file at its root that contains
    a list of all paths and thier corrosponding GUIDs.

2.3   Response Segment

    The response segments pourpose is to inform the user of what
    has hapened on the server side. Each response has a code
    and a message. Most codes have a standard message but this can
    be something else is desired.

        <Response Code> SP <Response Message>

2.3.1 Response Codes

    The standard response codes are as follows. These are intentionally
    quite simillar to HTTP response codes. Next to them is the standard
    response message, or its explict meaning with the standard response
    message quoted in brackets if it is diffrent.

    Descriptions are provided for some responses that may need
    additional information.
    
    100 Information
    101 Switching Protocols
    102 Processing
        Indicates that the server is currently processing the request,
        but it may take longer than the connection timeout length.
    103 Request Timeout

    200 Success ("Okay", "Serving")
    201 Created
    202 Accepted
    203 No Content
    204 Partial Content

    300 Security Error
    301 Diffrent Encryption Required
    302 TLS Handshake Failed
    303 TLS Certificate Expired
    304 TLS Certificate Not Verified

    400 Client Error
    401 Invalid Request (Malformed Packet)
    402 Unathorised
    403 Forbidden
    404 Not Found
    405 Method Not Allowed OR Invalid Method
    406 Proxy Authentication Required
    407 Network Authentication Required
    408 Conflict
    409 Gone
    410 Payload Too Large
    411 Too Early
        When requests are sent before the point in the connection
        where this is allowed.
    412 Upgrade Reccommended
    413 Upgrade Required
    414 Too Many Requests
    415 Wrong Instance
    416 Wrong Pourpose
    417 Missing Information ("Missing <Item1[, <Item2>...]>)

    500 Internal Server Error
    501 Not Implemented
    502 Bad Gateway
    503 Service Unavalible
    504 Gateway Timeout
    505 Version Not Supported
    506 Insufficent Storage
    507 Loop Detected
    508 Bandwidth Limit Exeeded
    509 Site Overloaded

2.3.2 Response Message

    You may wish to add a message to describe what went wrong to the
    other clients involved in the connection. This may be anything you
    wish, but the standard format is to capitalise the first letter
    of every word. 

    Messages must be Alphabetic (plus spaces) only. The allowed
    character set is
        
        A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
        a b c d e f g h i j k l m n o p q r s t u v w x y z
        <Space>

    The message field is required, but if you do not wish to send
    a message you should just send the codes standard meaning, for
    example "Not Found".

2.4   Header Line

    The header line holds a series of key-value pairs about the
    message being sent. Only lowercase ASCII is allowed in keys or
    values, and no control characters are allowed. All values MUST
    be strings, and MUST NOT be quoted.

        key1=value1;

    The key starts on the first byte of the line, or the first byte
    after the previous semicolon, and the string is considered the key
    until you reach the equals sign. You then begin the value the byte
    directly after the equals sign, and it continues until you reach
    the byte directly before the semicolon. This may continue for an
    indefinte number of variables.

    Each header variable has a strictly defined type and set of valid
    values, and using anything except these immeditely invalidates the
    packet. If you need to send other data, please use variables in
    the content field instead (See 2.5.1).

2.4.1 Variable Format

2.4.2 Variables

    There are 4 types for variables.

        bool    =  yes or no, "t" is yes, "f" is no. No other values
                   are acceptable

        string  =  any string of ASCII characters not containing an
                   equals sign, semicolon, or any control characters.
                   It is worth noting that most string fields do have
                   a limit on possible values, but it is beyond the
                   scope of this specification to define them.

        time    =  A timestamp as defined in RFC-3339 in the format
                   YYYY-MM-DD HH:MM:SS.msms , all in UTC time.

    Exact String        Type     Required   Notes
    ------------------- -------- ---------- --------------------------
    encryption          string   Yes        Algorithum used
    force_encryption    bool     Yes       
    author              dim uri  Yes       
    target              dim uri  Sometimes 
    channel_type        string   Sometimes 
    content_mime_type   string   Yes        Defined in RFC-2045
    content_format      string   Yes        See section 2.5
    time_sent           time     Yes        

2.5   Content Format

    The content format field MUST be all lowercase alphabetic ASCII
    with underscores between each word. You MAY abbreviate, for example
    both "universal_chess_interface" and "uci" are valid.

    Content may be formatted in any way people see fit, however rich
    formats such as HTML are discouraged due to its complexity for
    simple messaging. If you want a website, this is not the protcol
    to use!

    The most desired formats are Plaintext, Variables, Markdown[1], 
    and Wikitext. These formats cover virtually all cases you would
    want. No sequences require escapes, except by the format itself.

    WikiText is defined by Wikipedia specifically for wiki style
    content, and is the reccommended default for Article Channels.
    It can be reviewed at https://en.wikipedia.org/wiki/Help:Wikitext.

2.5.1 Variables

    The "variables" format is directly based on the INI file format.
    It was chosen as a base due to its extreme simplicity. Other
    mentioned formats have thier own specificatiom, but here we define
    the parsing rules for variables in the content field. Header field
    variables are parsed diffrently.

        [category]
        key=value   ; comment

    Strings inside of square brackets ("[", "]") define a category
    being the literal string inside it. 

    Only ASCII is allowed in category and key fields, but any
    characters except "=", "[", "]", and ";" are allowed in values,
    and any characters are allowed in comments.

    The key MUST be unique in its category, but does not need to be
    globally unique. When printing, interprit it was "Category.Key".

    Items placed before a category definition are assigned to the "_"
    category, and no category with the literal string "_" may be
    defined. If one is defined, it immeditely renders the packet
    invalid.

    Values should be interprited as strings by default if it starts
    with anything except a number (0-9). If it begins with a number,
    it is to be interprited as an intiger. You SHOULD place all
    strings in quotes.

    A key MUST start at the first character of a line, directly
    following the LF character. You MUST use CR lines, and MUST NOT
    use CRLF lines. 

    The key is parsed between the first character of the line and
    the equals sign, excluding any spaces. The value starts immeditely
    after the first non-space character after the equals sign.

    Anything on a line after a semicolon (";") character is to be
    interprited as a comment, unless you are currently in a quoted
    string.

    For clarity, there MUST NOT be more than one key value pair per
    line, and empty lines are to be ignored.

    When passing a category marker, all following variables until
    the next category marker are to be considered members of that
    category.

3     Connection

4     Channel Types

    This section, rather than describing the protocol itself, describes
    a few common channel and content types you may want to consider
    implementing in most user agents.

4.1   Text Channels

4.2   Voice Channels

4.3   Article Channels

4.5   Other Channels

Footnotes

    Test Cases
        This document includes no test cases, but many official test
        cases are avalible. See the accompanying directory, or go to
        < !! LINK TO TEST CASES !! > for more information.

    [1]: The markdown specification we reccommend using is not
         CommonMark since it is not very suitable to this format.
         This document has an accompanying specification for rich
         markdown that we reccommend be implemented instead.

Refrences

Security Considerations

Full Copyright Statement


